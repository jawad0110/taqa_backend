"""replace_old_price_new_price_with_price

Revision ID: 87d6d423e460
Revises: 2a50e5fad726
Create Date: 2025-06-19 16:48:40.914681

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '87d6d423e460'
down_revision: Union[str, None] = '2a50e5fad726'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Add the new price column as nullable first
    op.add_column('products', sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=True))
    
    # Copy data from new_price to price (use new_price as the primary price)
    op.execute("UPDATE products SET price = new_price WHERE new_price IS NOT NULL")
    
    # For products where new_price is null but old_price exists, use old_price
    op.execute("UPDATE products SET price = old_price WHERE price IS NULL AND old_price IS NOT NULL")
    
    # Set default price of 0 for any remaining null values
    op.execute("UPDATE products SET price = 0 WHERE price IS NULL")
    
    # Now make the price column non-nullable
    op.alter_column('products', 'price', nullable=False)
    
    # Drop the old columns
    op.drop_column('products', 'new_price')
    op.drop_column('products', 'old_price')


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('products', sa.Column('old_price', sa.NUMERIC(precision=10, scale=2), server_default=sa.text("'0'::double precision"), autoincrement=False, nullable=False))
    op.add_column('products', sa.Column('new_price', sa.NUMERIC(precision=10, scale=2), server_default=sa.text("'0'::double precision"), autoincrement=False, nullable=False))
    op.drop_column('products', 'price')
    # ### end Alembic commands ###
